- name: create directory /home/dir1
  file:
    path: /home/dir1
    state: directory
  tags: create_dir1

- name: create /home/dir1/file1
  file:
    path: /home/dir1/file1
    state: touch
    owner: root
    group: anisa
  tags: create_file1


- name: print variable list
  debug:
    msg: "{{user_list[0]}}"
  tags: print_variable 


- name: create file2 in dir1
  file:
    path: /home/dir1/file2
    state: touch
    owner: root
    group: root
  tags: create_file2


- name: command module
  command: cat file2
  args:
    chdir: /home/dir1
    creates: /home/dir2
    removes: /home/dir1
  register: var1  
  tags: cat_file2


- name: show var1
  debug:
    msg: "{{var1.stdout}}"
  tags: cat_file2


- name: command module with limitation like using pipe
  command: df -h
  register: var2
  tags: command_mod


- name: show var2
  debug:
    msg: "{{var2.stdout}}"
  tags: command_mod


- name: script module
  script: myscript.sh
  register: var3
  tags: script_mod

- name: show var3
  debug:
    msg: "{{var3.stdout}}"
  tags: script_mod


- name: expect module
  expect:
    command: passwd anisa
    responses:
      password: anisa
  no_log: true
  tags: expect_mod


- name: shell module with no limitation
  shell: df -h
  register: shell_var
  tags: shell_mod

- name: show shell_var
  debug:
    msg: "{{shell_var.stdout}}"
  tags: shell_mod


- name: raw module dosnt need python
  raw: echo "hello" > /home/dir1/file3
  tags: raw_mod


- name: copy module
  copy:
    src: /home/dir1/file.important
    dest: /home
    owner: root
    group: root
    mode: 0775
    backup: yes
    force: yes
    remote_src: yes
  tags: copy_mod


- name: fetch module
  fetch:
    src: /home/file.important
    dest: /home
    validate_checksum: yes
    flat: false
  tags: fetch_mod

- name: group module
  group:
    name: mygroup
    state: present
  tags: group_mod

- name: user module
  user:
    name: myuser
    state: present
    group: mygroup
    shell: /bin/bash
    home: /tmp/myuser
    password: "123"
  tags: user_mod 

- name: yum repository
  yum_repository:
    name: isc
    description: Base Repo
    baseurl: http://192.168.160.105:8081/repository/yumbase/
    gpgcheck: no
    enabled: yes
    state: present
  tags: yum_repo_mod

- name: yum module
  yum:
    name: nginx
    state: present
  tags: install_nginx

- name: yum update
  yum:
    name: nginx
    state: latest
    update_only: yes
  tags: update_nginx

- name: update all pakages
  yum:
    name: '*'
    state: latest
    exclude: kernel*
  tags: update_all

- name: list available pakages
  yum:
    list: nginx
  register: yum_out
  tags: yum_list

- name: show yum out
  debug:
    msg: "{{yum_out.stdout}}"
  tags: yum_list

- name: install epel-release
  yum:
    name: epel-release
    state: present
  tags: install_epel

- name: template module
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    backup: yes
    force: yes
  tags: tem_mod

- name: lineinfile module
  lineinfile:
    path: /etc/nginx/nginx.conf
    insertafter: '#        ssl_session_timeout  10m;'
    line: '        listen       [::]:3000;'
    state: absent
  tags: lineinfile_mod


- name: replace module
  replace:
    path: /etc/nginx/nginx.conf
    regexp: '        listen       8082;'
    replace: '        listen       80;'
    backup: yes
  tags: replace_mod

- name: service module
  service:
    name: nginx
    state: started
    enabled: yes
  tags: service_mod

- name: archive module
  archive:
    path: /home/dir1/
    dest: /opt/dir1.tar.gz
    exclude_path:
      - /home/dir1/file2
      - /home/dir1/file3
  tags: archive_mod
   
- name: unarchive module
  unarchive:
    src: dir1.tar.gz
    dest: /home/dir3/
    exclude:
      - file3
  tags: unarchive_mod

- name: wait for module
  wait_for:
    timeout: 10
  tags: waitfor_mod

- name: run a fail command
  command: /bin/false
  ignore_errors: yes
  tags: fail_com

- name: update all pakages
  yum:
    name: '*'
    state: latest
    exclude: kernel*
  async: 7500
  poll: 5  
  tags: update_all2 

- name: reboot remote hosts
  shell: 'sleep 1 && reboot'
  async: 1
  poll: 0
  ignore_errors: yes
  tags: reboot

- name: wait for boot
  wait_for_connection:
    timeout: 100
    delay: 5
    sleep: 5
  tags: reboot


- name: reboot module
  reboot:
    reboot_timeout: 100
  tags: reboot_mod

- name: timezone module
  timezone:
    name: Asia/Tehran
  tags: timezone_mod

- name: synchronize module
  synchronize:
    mode: push
    delete: no
    src: /opt
    dest: /home/dir3
    rsync_opts:
      - "--exclude=f2"
  tags: rsync_mod

- name: firewalld module
  firewalld:
    port: 80
    permanent: yes
    zone: public
    state: enabled
    immediate: true
  tags: firewalld_mod

- name: find in local host
  local_action:
    module: find
    paths: /home
    recurse: yes
    file_type: file
    age: -1w
    size: -1m
    pattern: "*.txt"
  tags: find_mod
  
- name: condition
  debug:
    msg: "this is RedHat base linux"
  when: ansible_os_family!="RedHat"
  tags: cond_1

- name: show msg if nginx installed
  shell: rpm -qa | grep nginx
  register: output
  tags: cond_2

- name: show msg
  debug:
    msg: "nginx was installed"
  when: "'nginx' in output.stdout"
  tags: cond_2

- name: finding inf  about pakages 
  package_facts:
    manager: auto
  tags: cond_3

- name: finding information about pakages
  debug:
    var: ansible_facts.packages['nginx']
  tags: cond_3

- name: show the msg
  debug:
    msg: "nginx was installed"
  when: "'nginx' in ansible_facts.packages"
  tags: cond_3

- name: check if backup_path is defined
  pause:
    prompt: "plz enter backup path:"
  register: backup_path2
  when: backup_path is not defined
  tags: cond_4

- name: find ansible in file2
  shell: cat /home/dir1/file2
  register: output
  tags: cond_5

- name: show if ansible exist
  debug:
    msg: "we find ansible"
  when: output.stdout.find('ansible') != -1
  tags: cond_5

- name: if var1 or var2
  debug:
    msg: "it is ok"
  when: var1 or var2 | bool
  tags: cond_6

- name: if var1 is false
  debug:
    msg: "it is false"
  when: not var1
  tags: cond_7

- name: get users input
  pause:
    prompt: "input (yes/no)"
  register: output
  tags: cond_8


- name: we can use this to get user input
  debug:
    msg: "{{hostvars[play_hosts.0].output.user_input}}"
  tags: cond_8

- name: standard loop
  file:
    path: /home/dir3/{{item}}
    state: touch
    owner: root
    group: root
    mode: 0644
  with_items:
    - a1
    - a2
    - a3
  tags: loop_1


- name: standard loop
  file:
    path: /home/dir3/{{item}}
    state: touch
    owner: root
    group: root
    mode: 0644
  loop:
    - b1
    - b2
    - b3
  tags: loop_2

- name: loop_yum1
  yum:
    name: '{{item}}'
    state: present
  loop:
    - nginx
    - vim
  tags: yum_1

- name: loop_yum2
  yum:
    name: ['nginx','vim']
    state: present
  tags: yum_2

- name: install and remove
  yum:
    name: '{{item.name}}'
    state: '{{item.state}}'
  loop:
    - { name: 'nginx', state: 'present' }
    - { name: 'httpd', state: 'absent' }
  tags: yum_3

- name: loop over dict
  debug:
    msg: "{{item.key}} - {{item.value}} - {{test_var}}"
  loop: "{{dict1 | dict2items}}"
  tags: loop_3

- name: loop over inventory
  debug:
    msg: "{{item}}"
  loop: "{{groups['myservers']}}"
  tags: loop_4

- name: loop over inventory
  debug:
    msg: "{{item}}"
  loop: "{{groups['all']}}"
  tags: loop_5

- name: loop over inventory
  debug:
    msg: "{{item}}"
  loop: "{{ansible_play_batch}}"
  tags: loop_6

- name: loop pause
  debug:
    msg: "{{item}}"
  loop: "{{groups['all']}}"
  loop_control:
    pause: 10
  tags: loop_7

- name: loop index
  debug:
    msg: "the {{item}} index is {{myindex}}"
  loop:
    - first
    - second
    - third
  loop_control:
    index_var: myindex
  tags: loop_8

- name: loop until
  shell: cat /home/dir3/text.txt
  register: output
  until: output.stdout.find("ansible") != -1
  retries: 4
  delay: 10
  tags: loop_9

- name: hello from task/main.yml
  debug:
    msg: "hello from task/main.yml"
  tags: hello_from

- name: set pass
  set_fact:
    mypass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          38633064376436366132663032616234663936643231343364633635653561316430366339373935
          6566356362626535376363366134623433323963303962650a336235376434313639313835376161
          39653634633635656230366632356139623933663236666336633362393635386634653735366134
          3763616431623334630a343862643035343331633831363837356436313239363561623630613837
          6131
  no_log: true
  tags: setpass

- name: show pass
  debug:
    msg: "{{mypass}}"
  tags: setpass



  










